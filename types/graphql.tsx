import { gql } from '@apollo/client';
import * as ApolloReactCommon from '@apollo/client';
import * as ApolloReactHooks from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  Upload: any;
};

/** Autogenerated return type of AcceptListingReports */
export type AcceptListingReportsPayload = {
  __typename?: 'AcceptListingReportsPayload';
  listing: Listing;
  message: Scalars['String'];
};

/** Autogenerated return type of AcceptOffer */
export type AcceptOfferPayload = {
  __typename?: 'AcceptOfferPayload';
  message: Scalars['String'];
};

export type ActiveRecordInterface = {
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type AdminListingInput = {
  id: Scalars['Int'];
  status?: Maybe<ListingStatusEnum>;
};

/** Autogenerated return type of ConfirmOffer */
export type ConfirmOfferPayload = {
  __typename?: 'ConfirmOfferPayload';
  message: Scalars['String'];
  viewer: Maybe<User>;
};

export type EmailPreference = ActiveRecordInterface & {
  __typename?: 'EmailPreference';
  category: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  subscribed: Scalars['Boolean'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type EmailPreferenceInput = {
  category: Scalars['String'];
  subscribed: Scalars['Boolean'];
};

/** Autogenerated return type of ForgotPassword */
export type ForgotPasswordPayload = {
  __typename?: 'ForgotPasswordPayload';
  message: Scalars['String'];
};


export type Listing = ActiveRecordInterface & {
  __typename?: 'Listing';
  createdAt: Scalars['ISO8601DateTime'];
  description: Scalars['String'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  images: Array<ListingImage>;
  isFavorited: Scalars['Boolean'];
  offers: Array<Offer>;
  ownedByUser: Scalars['Boolean'];
  player: Scalars['String'];
  price: Scalars['Int'];
  reports: Array<ListingReport>;
  seller: Seller;
  similarListings: Array<Listing>;
  status: ListingStatusEnum;
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  year: Maybe<Scalars['Int']>;
};


export type ListingIsFavoritedArgs = {
  userId?: Maybe<Scalars['Int']>;
};

export type ListingImage = ActiveRecordInterface & {
  __typename?: 'ListingImage';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  position: Scalars['Int'];
  updatedAt: Scalars['ISO8601DateTime'];
  url: Scalars['String'];
};

export type ListingInput = {
  id?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  price: Scalars['Float'];
  images: Array<Scalars['Upload']>;
  year?: Maybe<Scalars['Int']>;
  category: Scalars['String'];
  productType: Scalars['String'];
  manufacturer: Scalars['String'];
  setType: Scalars['String'];
  grader?: Maybe<Scalars['String']>;
  parallel?: Maybe<Scalars['String']>;
  player?: Maybe<Scalars['String']>;
  rookie?: Maybe<Scalars['Boolean']>;
};

export type ListingReport = ActiveRecordInterface & {
  __typename?: 'ListingReport';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  reviewedAt: Maybe<Scalars['ISO8601DateTime']>;
  text: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export enum ListingStatusEnum {
  /** available */
  Available = 'available',
  /** pending_sale */
  PendingSale = 'pending_sale',
  /** sold */
  Sold = 'sold',
  /** disabled */
  Disabled = 'disabled'
}

/** Autogenerated return type of MarkNoticesRead */
export type MarkNoticesReadPayload = {
  __typename?: 'MarkNoticesReadPayload';
  message: Scalars['String'];
  success: Scalars['Boolean'];
};

export type Membership = ActiveRecordInterface & {
  __typename?: 'Membership';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  price: Scalars['Int'];
  term: Scalars['String'];
  token: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Mutation = {
  __typename?: 'Mutation';
  acceptListingReports: Maybe<AcceptListingReportsPayload>;
  acceptOffer: Maybe<AcceptOfferPayload>;
  confirmOffer: Maybe<ConfirmOfferPayload>;
  forgotPassword: Maybe<ForgotPasswordPayload>;
  markNoticesRead: Maybe<MarkNoticesReadPayload>;
  reportListing: Maybe<ReportListingPayload>;
  saveEmailPreferences: Maybe<SaveEmailPreferencesPayload>;
  saveListing: Maybe<SaveListingPayload>;
  saveOffer: Maybe<SaveOfferPayload>;
  saveProfile: Maybe<SaveProfilePayload>;
  saveProfilePicture: Maybe<SaveProfilePicturePayload>;
  saveReview: Maybe<SaveReviewPayload>;
  syncPayment: Maybe<SyncPaymentPayload>;
  toggleFavoriteListing: Maybe<ToggleFavoriteListingPayload>;
  toggleFavoriteSeller: Maybe<ToggleFavoriteSellerPayload>;
  trackInterest: Maybe<TrackInterestPayload>;
  updateListing: Maybe<UpdateListingPayload>;
};


export type MutationAcceptListingReportsArgs = {
  listingId: Scalars['Int'];
};


export type MutationAcceptOfferArgs = {
  offerId: Scalars['Int'];
};


export type MutationConfirmOfferArgs = {
  offerId: Scalars['Int'];
};


export type MutationForgotPasswordArgs = {
  email: Scalars['String'];
};


export type MutationReportListingArgs = {
  listingId: Scalars['Int'];
  text: Scalars['String'];
};


export type MutationSaveEmailPreferencesArgs = {
  emailPreferences: Array<EmailPreferenceInput>;
  token?: Maybe<Scalars['String']>;
};


export type MutationSaveListingArgs = {
  listing: ListingInput;
};


export type MutationSaveOfferArgs = {
  offer: OfferInput;
};


export type MutationSaveProfileArgs = {
  profile: ProfileInput;
};


export type MutationSaveProfilePictureArgs = {
  picture: Scalars['Upload'];
};


export type MutationSaveReviewArgs = {
  review: ReviewInput;
};


export type MutationSyncPaymentArgs = {
  paymentMethodId: Scalars['String'];
};


export type MutationToggleFavoriteListingArgs = {
  listingId: Scalars['Int'];
  isFavorited: Scalars['Boolean'];
};


export type MutationToggleFavoriteSellerArgs = {
  sellerId: Scalars['Int'];
  isFavorited: Scalars['Boolean'];
};


export type MutationTrackInterestArgs = {
  listingId: Scalars['Int'];
};


export type MutationUpdateListingArgs = {
  listing: AdminListingInput;
};

export type Notice = ActiveRecordInterface & {
  __typename?: 'Notice';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  path: Maybe<Scalars['String']>;
  text: Scalars['String'];
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Offer = ActiveRecordInterface & {
  __typename?: 'Offer';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  listing: Listing;
  price: Scalars['Int'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type OfferInput = {
  price: Scalars['Float'];
  listingId: Scalars['Int'];
};

export type ProfileInput = {
  fullName?: Maybe<Scalars['String']>;
  street1?: Maybe<Scalars['String']>;
  street2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type Purchase = ActiveRecordInterface & {
  __typename?: 'Purchase';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  listing: Listing;
  offer: Offer;
  review: Maybe<Review>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Query = {
  __typename?: 'Query';
  auth: Scalars['Boolean'];
  invitedViewer: Maybe<User>;
  listing: Listing;
  listings: Array<Listing>;
  maybeViewer: Maybe<User>;
  purchase: Purchase;
  seller: Seller;
  stripeSetupIntentId: Scalars['String'];
  tags: Array<Tag>;
  viewer: User;
};


export type QueryInvitedViewerArgs = {
  token: Scalars['String'];
};


export type QueryListingArgs = {
  id: Scalars['Int'];
};


export type QueryListingsArgs = {
  listingIds: Array<Scalars['Int']>;
};


export type QueryPurchaseArgs = {
  token: Scalars['String'];
};


export type QuerySellerArgs = {
  username: Scalars['String'];
};


export type QueryTagsArgs = {
  context: TagTypesEnum;
  name?: Maybe<Scalars['String']>;
  minimum?: Maybe<Scalars['Int']>;
};


export type QueryViewerArgs = {
  token?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ReportListing */
export type ReportListingPayload = {
  __typename?: 'ReportListingPayload';
  message: Scalars['String'];
};

export type Review = ActiveRecordInterface & {
  __typename?: 'Review';
  accuracy: Maybe<Scalars['Int']>;
  communication: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  speed: Maybe<Scalars['Int']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type ReviewInput = {
  purchaseId: Scalars['Int'];
  speed?: Maybe<Scalars['Int']>;
  accuracy?: Maybe<Scalars['Int']>;
  communication?: Maybe<Scalars['Int']>;
};

/** Autogenerated return type of SaveEmailPreferences */
export type SaveEmailPreferencesPayload = {
  __typename?: 'SaveEmailPreferencesPayload';
  message: Scalars['String'];
  viewer: User;
};

/** Autogenerated return type of SaveListing */
export type SaveListingPayload = {
  __typename?: 'SaveListingPayload';
  message: Scalars['String'];
  newListingId: Maybe<Scalars['Int']>;
  viewer: User;
};

/** Autogenerated return type of SaveOffer */
export type SaveOfferPayload = {
  __typename?: 'SaveOfferPayload';
  message: Scalars['String'];
  offerId: Maybe<Scalars['Int']>;
  paymentIntentId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of SaveProfile */
export type SaveProfilePayload = {
  __typename?: 'SaveProfilePayload';
  message: Scalars['String'];
  viewer: User;
};

/** Autogenerated return type of SaveProfilePicture */
export type SaveProfilePicturePayload = {
  __typename?: 'SaveProfilePicturePayload';
  message: Scalars['String'];
  viewer: User;
};

/** Autogenerated return type of SaveReview */
export type SaveReviewPayload = {
  __typename?: 'SaveReviewPayload';
  message: Scalars['String'];
  purchase: Purchase;
};

export type Seller = ActiveRecordInterface & {
  __typename?: 'Seller';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  isFavorited: Scalars['Boolean'];
  profilePictureUrl: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  username: Scalars['String'];
};


export type SellerIsFavoritedArgs = {
  userId?: Maybe<Scalars['Int']>;
};

export type StripeAccount = ActiveRecordInterface & {
  __typename?: 'StripeAccount';
  chargesEnabled: Scalars['Boolean'];
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  onboardingLink: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type StripePaymentMethod = ActiveRecordInterface & {
  __typename?: 'StripePaymentMethod';
  brand: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  id: Scalars['Int'];
  last4: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

/** Autogenerated return type of SyncPayment */
export type SyncPaymentPayload = {
  __typename?: 'SyncPaymentPayload';
  message: Scalars['String'];
  viewer: User;
};

export type Tag = {
  __typename?: 'Tag';
  id: Scalars['String'];
  name: Scalars['String'];
};

export enum TagTypesEnum {
  /** player */
  Player = 'player',
  /** category */
  Category = 'category',
  /** product_type */
  ProductType = 'product_type',
  /** set_type */
  SetType = 'set_type',
  /** manufacturer */
  Manufacturer = 'manufacturer',
  /** grader */
  Grader = 'grader',
  /** parallel */
  Parallel = 'parallel'
}

/** Autogenerated return type of ToggleFavoriteListing */
export type ToggleFavoriteListingPayload = {
  __typename?: 'ToggleFavoriteListingPayload';
  listing: Listing;
  message: Scalars['String'];
};

/** Autogenerated return type of ToggleFavoriteSeller */
export type ToggleFavoriteSellerPayload = {
  __typename?: 'ToggleFavoriteSellerPayload';
  message: Scalars['String'];
  seller: Seller;
};

/** Autogenerated return type of TrackInterest */
export type TrackInterestPayload = {
  __typename?: 'TrackInterestPayload';
  message: Scalars['String'];
  success: Scalars['Boolean'];
};

/** Autogenerated return type of UpdateListing */
export type UpdateListingPayload = {
  __typename?: 'UpdateListingPayload';
  listing: Listing;
  message: Scalars['String'];
};


export type User = ActiveRecordInterface & {
  __typename?: 'User';
  admin: Scalars['Boolean'];
  availableMemberships: Array<Membership>;
  city: Maybe<Scalars['String']>;
  confirmed: Scalars['Boolean'];
  createdAt: Scalars['ISO8601DateTime'];
  email: Scalars['String'];
  emailPreferences: Array<EmailPreference>;
  errors: Array<Scalars['String']>;
  favoriteListings: Array<Listing>;
  favoriteSellers: Array<Seller>;
  fullName: Maybe<Scalars['String']>;
  hasActiveSubscription: Scalars['Boolean'];
  hasPaymentMethod: Scalars['Boolean'];
  id: Scalars['Int'];
  listings: Array<Listing>;
  offers: Array<Offer>;
  paymentMethod: Maybe<StripePaymentMethod>;
  profilePictureUrl: Scalars['String'];
  purchases: Array<Purchase>;
  state: Maybe<Scalars['String']>;
  street1: Maybe<Scalars['String']>;
  street2: Maybe<Scalars['String']>;
  stripeAccount: StripeAccount;
  unreadNotices: Array<Notice>;
  updatedAt: Scalars['ISO8601DateTime'];
  username: Scalars['String'];
  zip: Maybe<Scalars['String']>;
};


export type UserListingsArgs = {
  status?: Maybe<ListingStatusEnum>;
};


export type UserOffersArgs = {
  status?: Maybe<ListingStatusEnum>;
};


export type UserStripeAccountArgs = {
  refresh?: Maybe<Scalars['Boolean']>;
};

export type UserFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'email' | 'profilePictureUrl'>
  & AddressFragment
);

export type AddressFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'street1' | 'street2' | 'city' | 'state' | 'zip'>
);

export type ListingFragment = (
  { __typename?: 'Listing' }
  & Pick<Listing, 'id' | 'title' | 'createdAt' | 'description' | 'price' | 'status' | 'player' | 'isFavorited' | 'ownedByUser'>
  & { seller: (
    { __typename?: 'Seller' }
    & Pick<Seller, 'id' | 'username'>
  ), images: Array<(
    { __typename?: 'ListingImage' }
    & ListingImageFragment
  )>, offers: Array<(
    { __typename?: 'Offer' }
    & Pick<Offer, 'id' | 'price'>
  )> }
);

export type ListingImageFragment = (
  { __typename?: 'ListingImage' }
  & Pick<ListingImage, 'id' | 'url'>
);

export type OfferFragment = (
  { __typename?: 'Offer' }
  & Pick<Offer, 'id' | 'price'>
  & { listing: (
    { __typename?: 'Listing' }
    & Pick<Listing, 'id' | 'title'>
    & { images: Array<(
      { __typename?: 'ListingImage' }
      & ListingImageFragment
    )> }
  ) }
);

export type EmailPreferenceFragment = (
  { __typename?: 'EmailPreference' }
  & Pick<EmailPreference, 'id' | 'category' | 'subscribed'>
);

export type NoticeFragment = (
  { __typename?: 'Notice' }
  & Pick<Notice, 'id' | 'title' | 'text' | 'path'>
);

export type PaymentMethodFragment = (
  { __typename?: 'StripePaymentMethod' }
  & Pick<StripePaymentMethod, 'id' | 'brand' | 'last4' | 'expMonth' | 'expYear'>
);

export type ReviewFragment = (
  { __typename?: 'Review' }
  & Pick<Review, 'id' | 'speed' | 'accuracy' | 'communication'>
);

export type AcceptListingReportsMutationVariables = Exact<{
  listingId: Scalars['Int'];
}>;


export type AcceptListingReportsMutation = (
  { __typename?: 'Mutation' }
  & { acceptListingReports: Maybe<(
    { __typename?: 'AcceptListingReportsPayload' }
    & Pick<AcceptListingReportsPayload, 'message'>
    & { listing: (
      { __typename?: 'Listing' }
      & ListingFragment
    ) }
  )> }
);

export type UpdateListingMutationVariables = Exact<{
  listing: AdminListingInput;
}>;


export type UpdateListingMutation = (
  { __typename?: 'Mutation' }
  & { updateListing: Maybe<(
    { __typename?: 'UpdateListingPayload' }
    & Pick<UpdateListingPayload, 'message'>
    & { listing: (
      { __typename?: 'Listing' }
      & ListingFragment
    ) }
  )> }
);

export type TrackInterestMutationVariables = Exact<{
  listingId: Scalars['Int'];
}>;


export type TrackInterestMutation = (
  { __typename?: 'Mutation' }
  & { trackInterest: Maybe<(
    { __typename?: 'TrackInterestPayload' }
    & Pick<TrackInterestPayload, 'success'>
  )> }
);

export type MarkNoticesReadMutationVariables = Exact<{ [key: string]: never; }>;


export type MarkNoticesReadMutation = (
  { __typename?: 'Mutation' }
  & { markNoticesRead: Maybe<(
    { __typename?: 'MarkNoticesReadPayload' }
    & Pick<MarkNoticesReadPayload, 'success'>
  )> }
);

export type ForgotPasswordMutationVariables = Exact<{
  email: Scalars['String'];
}>;


export type ForgotPasswordMutation = (
  { __typename?: 'Mutation' }
  & { forgotPassword: Maybe<(
    { __typename?: 'ForgotPasswordPayload' }
    & Pick<ForgotPasswordPayload, 'message'>
  )> }
);

export type SaveListingMutationVariables = Exact<{
  listing: ListingInput;
}>;


export type SaveListingMutation = (
  { __typename?: 'Mutation' }
  & { saveListing: Maybe<(
    { __typename?: 'SaveListingPayload' }
    & Pick<SaveListingPayload, 'newListingId' | 'message'>
    & { viewer: (
      { __typename?: 'User' }
      & Pick<User, 'id'>
      & { availableListings: Array<(
        { __typename?: 'Listing' }
        & ListingFragment
      )> }
    ) }
  )> }
);

export type ReportListingMutationVariables = Exact<{
  listingId: Scalars['Int'];
  text: Scalars['String'];
}>;


export type ReportListingMutation = (
  { __typename?: 'Mutation' }
  & { reportListing: Maybe<(
    { __typename?: 'ReportListingPayload' }
    & Pick<ReportListingPayload, 'message'>
  )> }
);

export type ToggleFavoriteListingMutationVariables = Exact<{
  listingId: Scalars['Int'];
  isFavorited: Scalars['Boolean'];
}>;


export type ToggleFavoriteListingMutation = (
  { __typename?: 'Mutation' }
  & { toggleFavoriteListing: Maybe<(
    { __typename?: 'ToggleFavoriteListingPayload' }
    & { listing: (
      { __typename?: 'Listing' }
      & Pick<Listing, 'id' | 'isFavorited'>
    ) }
  )> }
);

export type SaveOfferMutationVariables = Exact<{
  offer: OfferInput;
}>;


export type SaveOfferMutation = (
  { __typename?: 'Mutation' }
  & { saveOffer: Maybe<(
    { __typename?: 'SaveOfferPayload' }
    & Pick<SaveOfferPayload, 'paymentIntentId' | 'offerId'>
  )> }
);

export type AcceptOfferMutationVariables = Exact<{
  offerId: Scalars['Int'];
}>;


export type AcceptOfferMutation = (
  { __typename?: 'Mutation' }
  & { acceptOffer: Maybe<(
    { __typename?: 'AcceptOfferPayload' }
    & Pick<AcceptOfferPayload, 'message'>
  )> }
);

export type ConfirmOfferMutationVariables = Exact<{
  offerId: Scalars['Int'];
}>;


export type ConfirmOfferMutation = (
  { __typename?: 'Mutation' }
  & { confirmOffer: Maybe<(
    { __typename?: 'ConfirmOfferPayload' }
    & { viewer: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id'>
      & { offers: Array<(
        { __typename?: 'Offer' }
        & OfferFragment
      )> }
    )> }
  )> }
);

export type SyncPaymentMutationVariables = Exact<{
  paymentMethodId: Scalars['String'];
}>;


export type SyncPaymentMutation = (
  { __typename?: 'Mutation' }
  & { syncPayment: Maybe<(
    { __typename?: 'SyncPaymentPayload' }
    & Pick<SyncPaymentPayload, 'message'>
    & { viewer: (
      { __typename?: 'User' }
      & Pick<User, 'id'>
      & { paymentMethod: Maybe<(
        { __typename?: 'StripePaymentMethod' }
        & PaymentMethodFragment
      )> }
    ) }
  )> }
);

export type SaveProfileMutationVariables = Exact<{
  profile: ProfileInput;
}>;


export type SaveProfileMutation = (
  { __typename?: 'Mutation' }
  & { saveProfile: Maybe<(
    { __typename?: 'SaveProfilePayload' }
    & Pick<SaveProfilePayload, 'message'>
    & { viewer: (
      { __typename?: 'User' }
      & UserFragment
    ) }
  )> }
);

export type SaveProfilePictureMutationVariables = Exact<{
  picture: Scalars['Upload'];
}>;


export type SaveProfilePictureMutation = (
  { __typename?: 'Mutation' }
  & { saveProfilePicture: Maybe<(
    { __typename?: 'SaveProfilePicturePayload' }
    & Pick<SaveProfilePicturePayload, 'message'>
    & { viewer: (
      { __typename?: 'User' }
      & Pick<User, 'id' | 'profilePictureUrl'>
    ) }
  )> }
);

export type SaveEmailPreferencesMutationVariables = Exact<{
  emailPreferences: Array<EmailPreferenceInput>;
  token?: Maybe<Scalars['String']>;
}>;


export type SaveEmailPreferencesMutation = (
  { __typename?: 'Mutation' }
  & { saveEmailPreferences: Maybe<(
    { __typename?: 'SaveEmailPreferencesPayload' }
    & Pick<SaveEmailPreferencesPayload, 'message'>
    & { viewer: (
      { __typename?: 'User' }
      & Pick<User, 'id'>
      & { emailPreferences: Array<(
        { __typename?: 'EmailPreference' }
        & EmailPreferenceFragment
      )> }
    ) }
  )> }
);

export type SaveReviewMutationVariables = Exact<{
  review: ReviewInput;
}>;


export type SaveReviewMutation = (
  { __typename?: 'Mutation' }
  & { saveReview: Maybe<(
    { __typename?: 'SaveReviewPayload' }
    & Pick<SaveReviewPayload, 'message'>
    & { purchase: (
      { __typename?: 'Purchase' }
      & Pick<Purchase, 'id'>
      & { review: Maybe<(
        { __typename?: 'Review' }
        & ReviewFragment
      )> }
    ) }
  )> }
);

export type ToggleFavoriteSellerMutationVariables = Exact<{
  sellerId: Scalars['Int'];
  isFavorited: Scalars['Boolean'];
}>;


export type ToggleFavoriteSellerMutation = (
  { __typename?: 'Mutation' }
  & { toggleFavoriteSeller: Maybe<(
    { __typename?: 'ToggleFavoriteSellerPayload' }
    & { seller: (
      { __typename?: 'Seller' }
      & Pick<Seller, 'id' | 'isFavorited'>
    ) }
  )> }
);

export type ProfileQueryVariables = Exact<{ [key: string]: never; }>;


export type ProfileQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & UserFragment
  ) }
);

export type ConfirmedQueryVariables = Exact<{ [key: string]: never; }>;


export type ConfirmedQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id' | 'confirmed'>
  ) }
);

export type AddressQueryVariables = Exact<{ [key: string]: never; }>;


export type AddressQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & AddressFragment
  ) }
);

export type AccountQueryVariables = Exact<{ [key: string]: never; }>;


export type AccountQuery = (
  { __typename?: 'Query' }
  & { maybeViewer: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'hasActiveSubscription' | 'hasPaymentMethod'>
    & { unreadNotices: Array<(
      { __typename?: 'Notice' }
      & NoticeFragment
    )>, stripeAccount: (
      { __typename?: 'StripeAccount' }
      & Pick<StripeAccount, 'id' | 'chargesEnabled' | 'onboardingLink'>
    ) }
  )> }
);

export type StripeAccountQueryVariables = Exact<{
  refresh?: Maybe<Scalars['Boolean']>;
}>;


export type StripeAccountQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { stripeAccount: (
      { __typename?: 'StripeAccount' }
      & Pick<StripeAccount, 'id' | 'chargesEnabled' | 'onboardingLink'>
    ) }
  ) }
);

export type AddPaymentQueryVariables = Exact<{ [key: string]: never; }>;


export type AddPaymentQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'stripeSetupIntentId'>
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { paymentMethod: Maybe<(
      { __typename?: 'StripePaymentMethod' }
      & Pick<StripePaymentMethod, 'id' | 'brand' | 'expMonth' | 'expYear' | 'last4'>
    )> }
  ) }
);

export type PaymentMethodQueryVariables = Exact<{ [key: string]: never; }>;


export type PaymentMethodQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { paymentMethod: Maybe<(
      { __typename?: 'StripePaymentMethod' }
      & Pick<StripePaymentMethod, 'id' | 'brand' | 'expMonth' | 'expYear' | 'last4'>
    )> }
  ) }
);

export type EmailPreferencesQueryVariables = Exact<{
  token?: Maybe<Scalars['String']>;
}>;


export type EmailPreferencesQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { emailPreferences: Array<(
      { __typename?: 'EmailPreference' }
      & EmailPreferenceFragment
    )> }
  ) }
);

export type AppDataQueryVariables = Exact<{ [key: string]: never; }>;


export type AppDataQuery = (
  { __typename?: 'Query' }
  & { maybeViewer: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'admin'>
  )>, playerTags: Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name'>
  )>, categoryTags: Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name'>
  )>, productTags: Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name'>
  )>, setTags: Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name'>
  )>, manufacturerTags: Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name'>
  )>, graderTags: Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name'>
  )>, parallelTags: Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name'>
  )> }
);

export type MaybeViewerQueryVariables = Exact<{ [key: string]: never; }>;


export type MaybeViewerQuery = (
  { __typename?: 'Query' }
  & { maybeViewer: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'admin'>
  )> }
);

export type InvitedViewerQueryVariables = Exact<{
  token: Scalars['String'];
}>;


export type InvitedViewerQuery = (
  { __typename?: 'Query' }
  & { invitedViewer: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'email'>
  )> }
);

export type ProductsQueryVariables = Exact<{ [key: string]: never; }>;


export type ProductsQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { availableMemberships: Array<(
      { __typename?: 'Membership' }
      & Pick<Membership, 'token' | 'price' | 'term'>
    )> }
  ) }
);

export type ListingQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type ListingQuery = (
  { __typename?: 'Query' }
  & { listing: (
    { __typename?: 'Listing' }
    & ListingFragment
  ) }
);

export type ListingPriceQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type ListingPriceQuery = (
  { __typename?: 'Query' }
  & { listing: (
    { __typename?: 'Listing' }
    & Pick<Listing, 'id' | 'price'>
  ) }
);

export type ListingsQueryVariables = Exact<{
  listingIds: Array<Scalars['Int']>;
}>;


export type ListingsQuery = (
  { __typename?: 'Query' }
  & { listings: Array<(
    { __typename?: 'Listing' }
    & ListingFragment
  )> }
);

export type UserListingsQueryVariables = Exact<{ [key: string]: never; }>;


export type UserListingsQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { availableListings: Array<(
      { __typename?: 'Listing' }
      & ListingFragment
    )>, soldListings: Array<(
      { __typename?: 'Listing' }
      & ListingFragment
    )> }
  ) }
);

export type ListingReportsQueryVariables = Exact<{
  listingId: Scalars['Int'];
}>;


export type ListingReportsQuery = (
  { __typename?: 'Query' }
  & { listing: (
    { __typename?: 'Listing' }
    & { reports: Array<(
      { __typename?: 'ListingReport' }
      & Pick<ListingReport, 'id' | 'text' | 'createdAt' | 'reviewedAt'>
    )> }
  ) }
);

export type TagsQueryVariables = Exact<{
  context: TagTypesEnum;
  name?: Maybe<Scalars['String']>;
  minimum?: Maybe<Scalars['Int']>;
}>;


export type TagsQuery = (
  { __typename?: 'Query' }
  & { tags: Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name'>
  )> }
);

export type FavoriteListingsQueryVariables = Exact<{ [key: string]: never; }>;


export type FavoriteListingsQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & { favoriteListings: Array<(
      { __typename?: 'Listing' }
      & ListingFragment
    )> }
  ) }
);

export type SimilarListingsQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type SimilarListingsQuery = (
  { __typename?: 'Query' }
  & { listing: (
    { __typename?: 'Listing' }
    & Pick<Listing, 'id'>
    & { similarListings: Array<(
      { __typename?: 'Listing' }
      & ListingFragment
    )> }
  ) }
);

export type UserOffersQueryVariables = Exact<{ [key: string]: never; }>;


export type UserOffersQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { offers: Array<(
      { __typename?: 'Offer' }
      & OfferFragment
    )> }
  ) }
);

export type PurchasesQueryVariables = Exact<{ [key: string]: never; }>;


export type PurchasesQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { purchases: Array<(
      { __typename?: 'Purchase' }
      & Pick<Purchase, 'id' | 'createdAt'>
      & { offer: (
        { __typename?: 'Offer' }
        & Pick<Offer, 'id' | 'price'>
      ), listing: (
        { __typename?: 'Listing' }
        & Pick<Listing, 'id' | 'title'>
        & { seller: (
          { __typename?: 'Seller' }
          & Pick<Seller, 'id' | 'username'>
        ), images: Array<(
          { __typename?: 'ListingImage' }
          & ListingImageFragment
        )> }
      ) }
    )> }
  ) }
);

export type PurchaseQueryVariables = Exact<{
  token: Scalars['String'];
}>;


export type PurchaseQuery = (
  { __typename?: 'Query' }
  & { purchase: (
    { __typename?: 'Purchase' }
    & Pick<Purchase, 'id'>
    & { review: Maybe<(
      { __typename?: 'Review' }
      & Pick<Review, 'id' | 'speed' | 'communication' | 'accuracy'>
    )> }
  ) }
);

export type SellerQueryVariables = Exact<{
  username: Scalars['String'];
}>;


export type SellerQuery = (
  { __typename?: 'Query' }
  & { seller: (
    { __typename?: 'Seller' }
    & Pick<Seller, 'id' | 'username' | 'profilePictureUrl' | 'isFavorited'>
  ) }
);

export type FavoriteSellersQueryVariables = Exact<{ [key: string]: never; }>;


export type FavoriteSellersQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & { favoriteSellers: Array<(
      { __typename?: 'Seller' }
      & Pick<Seller, 'id' | 'createdAt' | 'username' | 'profilePictureUrl' | 'isFavorited'>
    )> }
  ) }
);

export const AddressFragmentDoc = gql`
    fragment address on User {
  id
  street1
  street2
  city
  state
  zip
}
    `;
export const UserFragmentDoc = gql`
    fragment user on User {
  id
  email
  profilePictureUrl
  ...address
}
    ${AddressFragmentDoc}`;
export const ListingImageFragmentDoc = gql`
    fragment listingImage on ListingImage {
  id
  url
}
    `;
export const ListingFragmentDoc = gql`
    fragment listing on Listing {
  id
  title
  createdAt
  description
  price
  status
  player
  isFavorited
  ownedByUser
  seller {
    id
    username
  }
  images {
    ...listingImage
  }
  offers {
    id
    price
  }
}
    ${ListingImageFragmentDoc}`;
export const OfferFragmentDoc = gql`
    fragment offer on Offer {
  id
  price
  listing {
    id
    title
    images {
      ...listingImage
    }
  }
}
    ${ListingImageFragmentDoc}`;
export const EmailPreferenceFragmentDoc = gql`
    fragment emailPreference on EmailPreference {
  id
  category
  subscribed
}
    `;
export const NoticeFragmentDoc = gql`
    fragment notice on Notice {
  id
  title
  text
  path
}
    `;
export const PaymentMethodFragmentDoc = gql`
    fragment paymentMethod on StripePaymentMethod {
  id
  brand
  last4
  expMonth
  expYear
}
    `;
export const ReviewFragmentDoc = gql`
    fragment review on Review {
  id
  speed
  accuracy
  communication
}
    `;
export const AcceptListingReportsDocument = gql`
    mutation acceptListingReports($listingId: Int!) {
  acceptListingReports(listingId: $listingId) {
    listing {
      ...listing
    }
    message
  }
}
    ${ListingFragmentDoc}`;
export type AcceptListingReportsMutationFn = ApolloReactCommon.MutationFunction<AcceptListingReportsMutation, AcceptListingReportsMutationVariables>;

/**
 * __useAcceptListingReportsMutation__
 *
 * To run a mutation, you first call `useAcceptListingReportsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAcceptListingReportsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [acceptListingReportsMutation, { data, loading, error }] = useAcceptListingReportsMutation({
 *   variables: {
 *      listingId: // value for 'listingId'
 *   },
 * });
 */
export function useAcceptListingReportsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AcceptListingReportsMutation, AcceptListingReportsMutationVariables>) {
        return ApolloReactHooks.useMutation<AcceptListingReportsMutation, AcceptListingReportsMutationVariables>(AcceptListingReportsDocument, baseOptions);
      }
export type AcceptListingReportsMutationHookResult = ReturnType<typeof useAcceptListingReportsMutation>;
export type AcceptListingReportsMutationResult = ApolloReactCommon.MutationResult<AcceptListingReportsMutation>;
export type AcceptListingReportsMutationOptions = ApolloReactCommon.BaseMutationOptions<AcceptListingReportsMutation, AcceptListingReportsMutationVariables>;
export const UpdateListingDocument = gql`
    mutation updateListing($listing: AdminListingInput!) {
  updateListing(listing: $listing) {
    listing {
      ...listing
    }
    message
  }
}
    ${ListingFragmentDoc}`;
export type UpdateListingMutationFn = ApolloReactCommon.MutationFunction<UpdateListingMutation, UpdateListingMutationVariables>;

/**
 * __useUpdateListingMutation__
 *
 * To run a mutation, you first call `useUpdateListingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateListingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateListingMutation, { data, loading, error }] = useUpdateListingMutation({
 *   variables: {
 *      listing: // value for 'listing'
 *   },
 * });
 */
export function useUpdateListingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateListingMutation, UpdateListingMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateListingMutation, UpdateListingMutationVariables>(UpdateListingDocument, baseOptions);
      }
export type UpdateListingMutationHookResult = ReturnType<typeof useUpdateListingMutation>;
export type UpdateListingMutationResult = ApolloReactCommon.MutationResult<UpdateListingMutation>;
export type UpdateListingMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateListingMutation, UpdateListingMutationVariables>;
export const TrackInterestDocument = gql`
    mutation trackInterest($listingId: Int!) {
  trackInterest(listingId: $listingId) {
    success
  }
}
    `;
export type TrackInterestMutationFn = ApolloReactCommon.MutationFunction<TrackInterestMutation, TrackInterestMutationVariables>;

/**
 * __useTrackInterestMutation__
 *
 * To run a mutation, you first call `useTrackInterestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTrackInterestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [trackInterestMutation, { data, loading, error }] = useTrackInterestMutation({
 *   variables: {
 *      listingId: // value for 'listingId'
 *   },
 * });
 */
export function useTrackInterestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TrackInterestMutation, TrackInterestMutationVariables>) {
        return ApolloReactHooks.useMutation<TrackInterestMutation, TrackInterestMutationVariables>(TrackInterestDocument, baseOptions);
      }
export type TrackInterestMutationHookResult = ReturnType<typeof useTrackInterestMutation>;
export type TrackInterestMutationResult = ApolloReactCommon.MutationResult<TrackInterestMutation>;
export type TrackInterestMutationOptions = ApolloReactCommon.BaseMutationOptions<TrackInterestMutation, TrackInterestMutationVariables>;
export const MarkNoticesReadDocument = gql`
    mutation markNoticesRead {
  markNoticesRead {
    success
  }
}
    `;
export type MarkNoticesReadMutationFn = ApolloReactCommon.MutationFunction<MarkNoticesReadMutation, MarkNoticesReadMutationVariables>;

/**
 * __useMarkNoticesReadMutation__
 *
 * To run a mutation, you first call `useMarkNoticesReadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkNoticesReadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markNoticesReadMutation, { data, loading, error }] = useMarkNoticesReadMutation({
 *   variables: {
 *   },
 * });
 */
export function useMarkNoticesReadMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<MarkNoticesReadMutation, MarkNoticesReadMutationVariables>) {
        return ApolloReactHooks.useMutation<MarkNoticesReadMutation, MarkNoticesReadMutationVariables>(MarkNoticesReadDocument, baseOptions);
      }
export type MarkNoticesReadMutationHookResult = ReturnType<typeof useMarkNoticesReadMutation>;
export type MarkNoticesReadMutationResult = ApolloReactCommon.MutationResult<MarkNoticesReadMutation>;
export type MarkNoticesReadMutationOptions = ApolloReactCommon.BaseMutationOptions<MarkNoticesReadMutation, MarkNoticesReadMutationVariables>;
export const ForgotPasswordDocument = gql`
    mutation forgotPassword($email: String!) {
  forgotPassword(email: $email) {
    message
  }
}
    `;
export type ForgotPasswordMutationFn = ApolloReactCommon.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;

/**
 * __useForgotPasswordMutation__
 *
 * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useForgotPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {
        return ApolloReactHooks.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, baseOptions);
      }
export type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;
export type ForgotPasswordMutationResult = ApolloReactCommon.MutationResult<ForgotPasswordMutation>;
export type ForgotPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;
export const SaveListingDocument = gql`
    mutation saveListing($listing: ListingInput!) {
  saveListing(listing: $listing) {
    viewer {
      id
      availableListings: listings(status: available) {
        ...listing
      }
    }
    newListingId
    message
  }
}
    ${ListingFragmentDoc}`;
export type SaveListingMutationFn = ApolloReactCommon.MutationFunction<SaveListingMutation, SaveListingMutationVariables>;

/**
 * __useSaveListingMutation__
 *
 * To run a mutation, you first call `useSaveListingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveListingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveListingMutation, { data, loading, error }] = useSaveListingMutation({
 *   variables: {
 *      listing: // value for 'listing'
 *   },
 * });
 */
export function useSaveListingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveListingMutation, SaveListingMutationVariables>) {
        return ApolloReactHooks.useMutation<SaveListingMutation, SaveListingMutationVariables>(SaveListingDocument, baseOptions);
      }
export type SaveListingMutationHookResult = ReturnType<typeof useSaveListingMutation>;
export type SaveListingMutationResult = ApolloReactCommon.MutationResult<SaveListingMutation>;
export type SaveListingMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveListingMutation, SaveListingMutationVariables>;
export const ReportListingDocument = gql`
    mutation reportListing($listingId: Int!, $text: String!) {
  reportListing(listingId: $listingId, text: $text) {
    message
  }
}
    `;
export type ReportListingMutationFn = ApolloReactCommon.MutationFunction<ReportListingMutation, ReportListingMutationVariables>;

/**
 * __useReportListingMutation__
 *
 * To run a mutation, you first call `useReportListingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useReportListingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [reportListingMutation, { data, loading, error }] = useReportListingMutation({
 *   variables: {
 *      listingId: // value for 'listingId'
 *      text: // value for 'text'
 *   },
 * });
 */
export function useReportListingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReportListingMutation, ReportListingMutationVariables>) {
        return ApolloReactHooks.useMutation<ReportListingMutation, ReportListingMutationVariables>(ReportListingDocument, baseOptions);
      }
export type ReportListingMutationHookResult = ReturnType<typeof useReportListingMutation>;
export type ReportListingMutationResult = ApolloReactCommon.MutationResult<ReportListingMutation>;
export type ReportListingMutationOptions = ApolloReactCommon.BaseMutationOptions<ReportListingMutation, ReportListingMutationVariables>;
export const ToggleFavoriteListingDocument = gql`
    mutation toggleFavoriteListing($listingId: Int!, $isFavorited: Boolean!) {
  toggleFavoriteListing(listingId: $listingId, isFavorited: $isFavorited) {
    listing {
      id
      isFavorited
    }
  }
}
    `;
export type ToggleFavoriteListingMutationFn = ApolloReactCommon.MutationFunction<ToggleFavoriteListingMutation, ToggleFavoriteListingMutationVariables>;

/**
 * __useToggleFavoriteListingMutation__
 *
 * To run a mutation, you first call `useToggleFavoriteListingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useToggleFavoriteListingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [toggleFavoriteListingMutation, { data, loading, error }] = useToggleFavoriteListingMutation({
 *   variables: {
 *      listingId: // value for 'listingId'
 *      isFavorited: // value for 'isFavorited'
 *   },
 * });
 */
export function useToggleFavoriteListingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ToggleFavoriteListingMutation, ToggleFavoriteListingMutationVariables>) {
        return ApolloReactHooks.useMutation<ToggleFavoriteListingMutation, ToggleFavoriteListingMutationVariables>(ToggleFavoriteListingDocument, baseOptions);
      }
export type ToggleFavoriteListingMutationHookResult = ReturnType<typeof useToggleFavoriteListingMutation>;
export type ToggleFavoriteListingMutationResult = ApolloReactCommon.MutationResult<ToggleFavoriteListingMutation>;
export type ToggleFavoriteListingMutationOptions = ApolloReactCommon.BaseMutationOptions<ToggleFavoriteListingMutation, ToggleFavoriteListingMutationVariables>;
export const SaveOfferDocument = gql`
    mutation saveOffer($offer: OfferInput!) {
  saveOffer(offer: $offer) {
    paymentIntentId
    offerId
  }
}
    `;
export type SaveOfferMutationFn = ApolloReactCommon.MutationFunction<SaveOfferMutation, SaveOfferMutationVariables>;

/**
 * __useSaveOfferMutation__
 *
 * To run a mutation, you first call `useSaveOfferMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveOfferMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveOfferMutation, { data, loading, error }] = useSaveOfferMutation({
 *   variables: {
 *      offer: // value for 'offer'
 *   },
 * });
 */
export function useSaveOfferMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveOfferMutation, SaveOfferMutationVariables>) {
        return ApolloReactHooks.useMutation<SaveOfferMutation, SaveOfferMutationVariables>(SaveOfferDocument, baseOptions);
      }
export type SaveOfferMutationHookResult = ReturnType<typeof useSaveOfferMutation>;
export type SaveOfferMutationResult = ApolloReactCommon.MutationResult<SaveOfferMutation>;
export type SaveOfferMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveOfferMutation, SaveOfferMutationVariables>;
export const AcceptOfferDocument = gql`
    mutation acceptOffer($offerId: Int!) {
  acceptOffer(offerId: $offerId) {
    message
  }
}
    `;
export type AcceptOfferMutationFn = ApolloReactCommon.MutationFunction<AcceptOfferMutation, AcceptOfferMutationVariables>;

/**
 * __useAcceptOfferMutation__
 *
 * To run a mutation, you first call `useAcceptOfferMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAcceptOfferMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [acceptOfferMutation, { data, loading, error }] = useAcceptOfferMutation({
 *   variables: {
 *      offerId: // value for 'offerId'
 *   },
 * });
 */
export function useAcceptOfferMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AcceptOfferMutation, AcceptOfferMutationVariables>) {
        return ApolloReactHooks.useMutation<AcceptOfferMutation, AcceptOfferMutationVariables>(AcceptOfferDocument, baseOptions);
      }
export type AcceptOfferMutationHookResult = ReturnType<typeof useAcceptOfferMutation>;
export type AcceptOfferMutationResult = ApolloReactCommon.MutationResult<AcceptOfferMutation>;
export type AcceptOfferMutationOptions = ApolloReactCommon.BaseMutationOptions<AcceptOfferMutation, AcceptOfferMutationVariables>;
export const ConfirmOfferDocument = gql`
    mutation confirmOffer($offerId: Int!) {
  confirmOffer(offerId: $offerId) {
    viewer {
      id
      offers {
        ...offer
      }
    }
  }
}
    ${OfferFragmentDoc}`;
export type ConfirmOfferMutationFn = ApolloReactCommon.MutationFunction<ConfirmOfferMutation, ConfirmOfferMutationVariables>;

/**
 * __useConfirmOfferMutation__
 *
 * To run a mutation, you first call `useConfirmOfferMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useConfirmOfferMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [confirmOfferMutation, { data, loading, error }] = useConfirmOfferMutation({
 *   variables: {
 *      offerId: // value for 'offerId'
 *   },
 * });
 */
export function useConfirmOfferMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ConfirmOfferMutation, ConfirmOfferMutationVariables>) {
        return ApolloReactHooks.useMutation<ConfirmOfferMutation, ConfirmOfferMutationVariables>(ConfirmOfferDocument, baseOptions);
      }
export type ConfirmOfferMutationHookResult = ReturnType<typeof useConfirmOfferMutation>;
export type ConfirmOfferMutationResult = ApolloReactCommon.MutationResult<ConfirmOfferMutation>;
export type ConfirmOfferMutationOptions = ApolloReactCommon.BaseMutationOptions<ConfirmOfferMutation, ConfirmOfferMutationVariables>;
export const SyncPaymentDocument = gql`
    mutation syncPayment($paymentMethodId: String!) {
  syncPayment(paymentMethodId: $paymentMethodId) {
    viewer {
      id
      paymentMethod {
        ...paymentMethod
      }
    }
    message
  }
}
    ${PaymentMethodFragmentDoc}`;
export type SyncPaymentMutationFn = ApolloReactCommon.MutationFunction<SyncPaymentMutation, SyncPaymentMutationVariables>;

/**
 * __useSyncPaymentMutation__
 *
 * To run a mutation, you first call `useSyncPaymentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSyncPaymentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [syncPaymentMutation, { data, loading, error }] = useSyncPaymentMutation({
 *   variables: {
 *      paymentMethodId: // value for 'paymentMethodId'
 *   },
 * });
 */
export function useSyncPaymentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SyncPaymentMutation, SyncPaymentMutationVariables>) {
        return ApolloReactHooks.useMutation<SyncPaymentMutation, SyncPaymentMutationVariables>(SyncPaymentDocument, baseOptions);
      }
export type SyncPaymentMutationHookResult = ReturnType<typeof useSyncPaymentMutation>;
export type SyncPaymentMutationResult = ApolloReactCommon.MutationResult<SyncPaymentMutation>;
export type SyncPaymentMutationOptions = ApolloReactCommon.BaseMutationOptions<SyncPaymentMutation, SyncPaymentMutationVariables>;
export const SaveProfileDocument = gql`
    mutation saveProfile($profile: ProfileInput!) {
  saveProfile(profile: $profile) {
    viewer {
      ...user
    }
    message
  }
}
    ${UserFragmentDoc}`;
export type SaveProfileMutationFn = ApolloReactCommon.MutationFunction<SaveProfileMutation, SaveProfileMutationVariables>;

/**
 * __useSaveProfileMutation__
 *
 * To run a mutation, you first call `useSaveProfileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveProfileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveProfileMutation, { data, loading, error }] = useSaveProfileMutation({
 *   variables: {
 *      profile: // value for 'profile'
 *   },
 * });
 */
export function useSaveProfileMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveProfileMutation, SaveProfileMutationVariables>) {
        return ApolloReactHooks.useMutation<SaveProfileMutation, SaveProfileMutationVariables>(SaveProfileDocument, baseOptions);
      }
export type SaveProfileMutationHookResult = ReturnType<typeof useSaveProfileMutation>;
export type SaveProfileMutationResult = ApolloReactCommon.MutationResult<SaveProfileMutation>;
export type SaveProfileMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveProfileMutation, SaveProfileMutationVariables>;
export const SaveProfilePictureDocument = gql`
    mutation saveProfilePicture($picture: Upload!) {
  saveProfilePicture(picture: $picture) {
    viewer {
      id
      profilePictureUrl
    }
    message
  }
}
    `;
export type SaveProfilePictureMutationFn = ApolloReactCommon.MutationFunction<SaveProfilePictureMutation, SaveProfilePictureMutationVariables>;

/**
 * __useSaveProfilePictureMutation__
 *
 * To run a mutation, you first call `useSaveProfilePictureMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveProfilePictureMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveProfilePictureMutation, { data, loading, error }] = useSaveProfilePictureMutation({
 *   variables: {
 *      picture: // value for 'picture'
 *   },
 * });
 */
export function useSaveProfilePictureMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveProfilePictureMutation, SaveProfilePictureMutationVariables>) {
        return ApolloReactHooks.useMutation<SaveProfilePictureMutation, SaveProfilePictureMutationVariables>(SaveProfilePictureDocument, baseOptions);
      }
export type SaveProfilePictureMutationHookResult = ReturnType<typeof useSaveProfilePictureMutation>;
export type SaveProfilePictureMutationResult = ApolloReactCommon.MutationResult<SaveProfilePictureMutation>;
export type SaveProfilePictureMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveProfilePictureMutation, SaveProfilePictureMutationVariables>;
export const SaveEmailPreferencesDocument = gql`
    mutation saveEmailPreferences($emailPreferences: [EmailPreferenceInput!]!, $token: String) {
  saveEmailPreferences(emailPreferences: $emailPreferences, token: $token) {
    viewer {
      id
      emailPreferences {
        ...emailPreference
      }
    }
    message
  }
}
    ${EmailPreferenceFragmentDoc}`;
export type SaveEmailPreferencesMutationFn = ApolloReactCommon.MutationFunction<SaveEmailPreferencesMutation, SaveEmailPreferencesMutationVariables>;

/**
 * __useSaveEmailPreferencesMutation__
 *
 * To run a mutation, you first call `useSaveEmailPreferencesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveEmailPreferencesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveEmailPreferencesMutation, { data, loading, error }] = useSaveEmailPreferencesMutation({
 *   variables: {
 *      emailPreferences: // value for 'emailPreferences'
 *      token: // value for 'token'
 *   },
 * });
 */
export function useSaveEmailPreferencesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveEmailPreferencesMutation, SaveEmailPreferencesMutationVariables>) {
        return ApolloReactHooks.useMutation<SaveEmailPreferencesMutation, SaveEmailPreferencesMutationVariables>(SaveEmailPreferencesDocument, baseOptions);
      }
export type SaveEmailPreferencesMutationHookResult = ReturnType<typeof useSaveEmailPreferencesMutation>;
export type SaveEmailPreferencesMutationResult = ApolloReactCommon.MutationResult<SaveEmailPreferencesMutation>;
export type SaveEmailPreferencesMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveEmailPreferencesMutation, SaveEmailPreferencesMutationVariables>;
export const SaveReviewDocument = gql`
    mutation saveReview($review: ReviewInput!) {
  saveReview(review: $review) {
    purchase {
      id
      review {
        ...review
      }
    }
    message
  }
}
    ${ReviewFragmentDoc}`;
export type SaveReviewMutationFn = ApolloReactCommon.MutationFunction<SaveReviewMutation, SaveReviewMutationVariables>;

/**
 * __useSaveReviewMutation__
 *
 * To run a mutation, you first call `useSaveReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveReviewMutation, { data, loading, error }] = useSaveReviewMutation({
 *   variables: {
 *      review: // value for 'review'
 *   },
 * });
 */
export function useSaveReviewMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveReviewMutation, SaveReviewMutationVariables>) {
        return ApolloReactHooks.useMutation<SaveReviewMutation, SaveReviewMutationVariables>(SaveReviewDocument, baseOptions);
      }
export type SaveReviewMutationHookResult = ReturnType<typeof useSaveReviewMutation>;
export type SaveReviewMutationResult = ApolloReactCommon.MutationResult<SaveReviewMutation>;
export type SaveReviewMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveReviewMutation, SaveReviewMutationVariables>;
export const ToggleFavoriteSellerDocument = gql`
    mutation toggleFavoriteSeller($sellerId: Int!, $isFavorited: Boolean!) {
  toggleFavoriteSeller(sellerId: $sellerId, isFavorited: $isFavorited) {
    seller {
      id
      isFavorited
    }
  }
}
    `;
export type ToggleFavoriteSellerMutationFn = ApolloReactCommon.MutationFunction<ToggleFavoriteSellerMutation, ToggleFavoriteSellerMutationVariables>;

/**
 * __useToggleFavoriteSellerMutation__
 *
 * To run a mutation, you first call `useToggleFavoriteSellerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useToggleFavoriteSellerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [toggleFavoriteSellerMutation, { data, loading, error }] = useToggleFavoriteSellerMutation({
 *   variables: {
 *      sellerId: // value for 'sellerId'
 *      isFavorited: // value for 'isFavorited'
 *   },
 * });
 */
export function useToggleFavoriteSellerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ToggleFavoriteSellerMutation, ToggleFavoriteSellerMutationVariables>) {
        return ApolloReactHooks.useMutation<ToggleFavoriteSellerMutation, ToggleFavoriteSellerMutationVariables>(ToggleFavoriteSellerDocument, baseOptions);
      }
export type ToggleFavoriteSellerMutationHookResult = ReturnType<typeof useToggleFavoriteSellerMutation>;
export type ToggleFavoriteSellerMutationResult = ApolloReactCommon.MutationResult<ToggleFavoriteSellerMutation>;
export type ToggleFavoriteSellerMutationOptions = ApolloReactCommon.BaseMutationOptions<ToggleFavoriteSellerMutation, ToggleFavoriteSellerMutationVariables>;
export const ProfileDocument = gql`
    query profile {
  viewer {
    ...user
  }
}
    ${UserFragmentDoc}`;

/**
 * __useProfileQuery__
 *
 * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProfileQuery({
 *   variables: {
 *   },
 * });
 */
export function useProfileQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProfileQuery, ProfileQueryVariables>) {
        return ApolloReactHooks.useQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, baseOptions);
      }
export function useProfileLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, baseOptions);
        }
export type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;
export type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;
export type ProfileQueryResult = ApolloReactCommon.QueryResult<ProfileQuery, ProfileQueryVariables>;
export const ConfirmedDocument = gql`
    query confirmed {
  viewer {
    id
    confirmed
  }
}
    `;

/**
 * __useConfirmedQuery__
 *
 * To run a query within a React component, call `useConfirmedQuery` and pass it any options that fit your needs.
 * When your component renders, `useConfirmedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useConfirmedQuery({
 *   variables: {
 *   },
 * });
 */
export function useConfirmedQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ConfirmedQuery, ConfirmedQueryVariables>) {
        return ApolloReactHooks.useQuery<ConfirmedQuery, ConfirmedQueryVariables>(ConfirmedDocument, baseOptions);
      }
export function useConfirmedLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ConfirmedQuery, ConfirmedQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ConfirmedQuery, ConfirmedQueryVariables>(ConfirmedDocument, baseOptions);
        }
export type ConfirmedQueryHookResult = ReturnType<typeof useConfirmedQuery>;
export type ConfirmedLazyQueryHookResult = ReturnType<typeof useConfirmedLazyQuery>;
export type ConfirmedQueryResult = ApolloReactCommon.QueryResult<ConfirmedQuery, ConfirmedQueryVariables>;
export const AddressDocument = gql`
    query address {
  viewer {
    ...address
  }
}
    ${AddressFragmentDoc}`;

/**
 * __useAddressQuery__
 *
 * To run a query within a React component, call `useAddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useAddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAddressQuery({
 *   variables: {
 *   },
 * });
 */
export function useAddressQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AddressQuery, AddressQueryVariables>) {
        return ApolloReactHooks.useQuery<AddressQuery, AddressQueryVariables>(AddressDocument, baseOptions);
      }
export function useAddressLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AddressQuery, AddressQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AddressQuery, AddressQueryVariables>(AddressDocument, baseOptions);
        }
export type AddressQueryHookResult = ReturnType<typeof useAddressQuery>;
export type AddressLazyQueryHookResult = ReturnType<typeof useAddressLazyQuery>;
export type AddressQueryResult = ApolloReactCommon.QueryResult<AddressQuery, AddressQueryVariables>;
export const AccountDocument = gql`
    query account {
  maybeViewer {
    id
    unreadNotices {
      ...notice
    }
    hasActiveSubscription
    hasPaymentMethod
    stripeAccount {
      id
      chargesEnabled
      onboardingLink
    }
  }
}
    ${NoticeFragmentDoc}`;

/**
 * __useAccountQuery__
 *
 * To run a query within a React component, call `useAccountQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountQuery({
 *   variables: {
 *   },
 * });
 */
export function useAccountQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AccountQuery, AccountQueryVariables>) {
        return ApolloReactHooks.useQuery<AccountQuery, AccountQueryVariables>(AccountDocument, baseOptions);
      }
export function useAccountLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AccountQuery, AccountQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AccountQuery, AccountQueryVariables>(AccountDocument, baseOptions);
        }
export type AccountQueryHookResult = ReturnType<typeof useAccountQuery>;
export type AccountLazyQueryHookResult = ReturnType<typeof useAccountLazyQuery>;
export type AccountQueryResult = ApolloReactCommon.QueryResult<AccountQuery, AccountQueryVariables>;
export const StripeAccountDocument = gql`
    query stripeAccount($refresh: Boolean) {
  viewer {
    id
    stripeAccount(refresh: $refresh) {
      id
      chargesEnabled
      onboardingLink
    }
  }
}
    `;

/**
 * __useStripeAccountQuery__
 *
 * To run a query within a React component, call `useStripeAccountQuery` and pass it any options that fit your needs.
 * When your component renders, `useStripeAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStripeAccountQuery({
 *   variables: {
 *      refresh: // value for 'refresh'
 *   },
 * });
 */
export function useStripeAccountQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<StripeAccountQuery, StripeAccountQueryVariables>) {
        return ApolloReactHooks.useQuery<StripeAccountQuery, StripeAccountQueryVariables>(StripeAccountDocument, baseOptions);
      }
export function useStripeAccountLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<StripeAccountQuery, StripeAccountQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<StripeAccountQuery, StripeAccountQueryVariables>(StripeAccountDocument, baseOptions);
        }
export type StripeAccountQueryHookResult = ReturnType<typeof useStripeAccountQuery>;
export type StripeAccountLazyQueryHookResult = ReturnType<typeof useStripeAccountLazyQuery>;
export type StripeAccountQueryResult = ApolloReactCommon.QueryResult<StripeAccountQuery, StripeAccountQueryVariables>;
export const AddPaymentDocument = gql`
    query addPayment {
  stripeSetupIntentId
  viewer {
    id
    paymentMethod {
      id
      brand
      expMonth
      expYear
      last4
    }
  }
}
    `;

/**
 * __useAddPaymentQuery__
 *
 * To run a query within a React component, call `useAddPaymentQuery` and pass it any options that fit your needs.
 * When your component renders, `useAddPaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAddPaymentQuery({
 *   variables: {
 *   },
 * });
 */
export function useAddPaymentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AddPaymentQuery, AddPaymentQueryVariables>) {
        return ApolloReactHooks.useQuery<AddPaymentQuery, AddPaymentQueryVariables>(AddPaymentDocument, baseOptions);
      }
export function useAddPaymentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AddPaymentQuery, AddPaymentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AddPaymentQuery, AddPaymentQueryVariables>(AddPaymentDocument, baseOptions);
        }
export type AddPaymentQueryHookResult = ReturnType<typeof useAddPaymentQuery>;
export type AddPaymentLazyQueryHookResult = ReturnType<typeof useAddPaymentLazyQuery>;
export type AddPaymentQueryResult = ApolloReactCommon.QueryResult<AddPaymentQuery, AddPaymentQueryVariables>;
export const PaymentMethodDocument = gql`
    query paymentMethod {
  viewer {
    id
    paymentMethod {
      id
      brand
      expMonth
      expYear
      last4
    }
  }
}
    `;

/**
 * __usePaymentMethodQuery__
 *
 * To run a query within a React component, call `usePaymentMethodQuery` and pass it any options that fit your needs.
 * When your component renders, `usePaymentMethodQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePaymentMethodQuery({
 *   variables: {
 *   },
 * });
 */
export function usePaymentMethodQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PaymentMethodQuery, PaymentMethodQueryVariables>) {
        return ApolloReactHooks.useQuery<PaymentMethodQuery, PaymentMethodQueryVariables>(PaymentMethodDocument, baseOptions);
      }
export function usePaymentMethodLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PaymentMethodQuery, PaymentMethodQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PaymentMethodQuery, PaymentMethodQueryVariables>(PaymentMethodDocument, baseOptions);
        }
export type PaymentMethodQueryHookResult = ReturnType<typeof usePaymentMethodQuery>;
export type PaymentMethodLazyQueryHookResult = ReturnType<typeof usePaymentMethodLazyQuery>;
export type PaymentMethodQueryResult = ApolloReactCommon.QueryResult<PaymentMethodQuery, PaymentMethodQueryVariables>;
export const EmailPreferencesDocument = gql`
    query emailPreferences($token: String) {
  viewer(token: $token) {
    id
    emailPreferences {
      ...emailPreference
    }
  }
}
    ${EmailPreferenceFragmentDoc}`;

/**
 * __useEmailPreferencesQuery__
 *
 * To run a query within a React component, call `useEmailPreferencesQuery` and pass it any options that fit your needs.
 * When your component renders, `useEmailPreferencesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useEmailPreferencesQuery({
 *   variables: {
 *      token: // value for 'token'
 *   },
 * });
 */
export function useEmailPreferencesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<EmailPreferencesQuery, EmailPreferencesQueryVariables>) {
        return ApolloReactHooks.useQuery<EmailPreferencesQuery, EmailPreferencesQueryVariables>(EmailPreferencesDocument, baseOptions);
      }
export function useEmailPreferencesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<EmailPreferencesQuery, EmailPreferencesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<EmailPreferencesQuery, EmailPreferencesQueryVariables>(EmailPreferencesDocument, baseOptions);
        }
export type EmailPreferencesQueryHookResult = ReturnType<typeof useEmailPreferencesQuery>;
export type EmailPreferencesLazyQueryHookResult = ReturnType<typeof useEmailPreferencesLazyQuery>;
export type EmailPreferencesQueryResult = ApolloReactCommon.QueryResult<EmailPreferencesQuery, EmailPreferencesQueryVariables>;
export const AppDataDocument = gql`
    query appData {
  maybeViewer {
    id
    admin
  }
  playerTags: tags(context: player) {
    id
    name
  }
  categoryTags: tags(context: category) {
    id
    name
  }
  productTags: tags(context: product_type) {
    id
    name
  }
  setTags: tags(context: set_type) {
    id
    name
  }
  manufacturerTags: tags(context: manufacturer) {
    id
    name
  }
  graderTags: tags(context: grader) {
    id
    name
  }
  parallelTags: tags(context: parallel) {
    id
    name
  }
}
    `;

/**
 * __useAppDataQuery__
 *
 * To run a query within a React component, call `useAppDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useAppDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAppDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useAppDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AppDataQuery, AppDataQueryVariables>) {
        return ApolloReactHooks.useQuery<AppDataQuery, AppDataQueryVariables>(AppDataDocument, baseOptions);
      }
export function useAppDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AppDataQuery, AppDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AppDataQuery, AppDataQueryVariables>(AppDataDocument, baseOptions);
        }
export type AppDataQueryHookResult = ReturnType<typeof useAppDataQuery>;
export type AppDataLazyQueryHookResult = ReturnType<typeof useAppDataLazyQuery>;
export type AppDataQueryResult = ApolloReactCommon.QueryResult<AppDataQuery, AppDataQueryVariables>;
export const MaybeViewerDocument = gql`
    query maybeViewer {
  maybeViewer {
    id
    admin
  }
}
    `;

/**
 * __useMaybeViewerQuery__
 *
 * To run a query within a React component, call `useMaybeViewerQuery` and pass it any options that fit your needs.
 * When your component renders, `useMaybeViewerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMaybeViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useMaybeViewerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MaybeViewerQuery, MaybeViewerQueryVariables>) {
        return ApolloReactHooks.useQuery<MaybeViewerQuery, MaybeViewerQueryVariables>(MaybeViewerDocument, baseOptions);
      }
export function useMaybeViewerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MaybeViewerQuery, MaybeViewerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<MaybeViewerQuery, MaybeViewerQueryVariables>(MaybeViewerDocument, baseOptions);
        }
export type MaybeViewerQueryHookResult = ReturnType<typeof useMaybeViewerQuery>;
export type MaybeViewerLazyQueryHookResult = ReturnType<typeof useMaybeViewerLazyQuery>;
export type MaybeViewerQueryResult = ApolloReactCommon.QueryResult<MaybeViewerQuery, MaybeViewerQueryVariables>;
export const InvitedViewerDocument = gql`
    query invitedViewer($token: String!) {
  invitedViewer(token: $token) {
    id
    email
  }
}
    `;

/**
 * __useInvitedViewerQuery__
 *
 * To run a query within a React component, call `useInvitedViewerQuery` and pass it any options that fit your needs.
 * When your component renders, `useInvitedViewerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useInvitedViewerQuery({
 *   variables: {
 *      token: // value for 'token'
 *   },
 * });
 */
export function useInvitedViewerQuery(baseOptions: ApolloReactHooks.QueryHookOptions<InvitedViewerQuery, InvitedViewerQueryVariables>) {
        return ApolloReactHooks.useQuery<InvitedViewerQuery, InvitedViewerQueryVariables>(InvitedViewerDocument, baseOptions);
      }
export function useInvitedViewerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<InvitedViewerQuery, InvitedViewerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<InvitedViewerQuery, InvitedViewerQueryVariables>(InvitedViewerDocument, baseOptions);
        }
export type InvitedViewerQueryHookResult = ReturnType<typeof useInvitedViewerQuery>;
export type InvitedViewerLazyQueryHookResult = ReturnType<typeof useInvitedViewerLazyQuery>;
export type InvitedViewerQueryResult = ApolloReactCommon.QueryResult<InvitedViewerQuery, InvitedViewerQueryVariables>;
export const ProductsDocument = gql`
    query products {
  viewer {
    id
    availableMemberships {
      token
      price
      term
    }
  }
}
    `;

/**
 * __useProductsQuery__
 *
 * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProductsQuery({
 *   variables: {
 *   },
 * });
 */
export function useProductsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsQuery, ProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);
      }
export function useProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsQuery, ProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);
        }
export type ProductsQueryHookResult = ReturnType<typeof useProductsQuery>;
export type ProductsLazyQueryHookResult = ReturnType<typeof useProductsLazyQuery>;
export type ProductsQueryResult = ApolloReactCommon.QueryResult<ProductsQuery, ProductsQueryVariables>;
export const ListingDocument = gql`
    query listing($id: Int!) {
  listing(id: $id) {
    ...listing
  }
}
    ${ListingFragmentDoc}`;

/**
 * __useListingQuery__
 *
 * To run a query within a React component, call `useListingQuery` and pass it any options that fit your needs.
 * When your component renders, `useListingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListingQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useListingQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ListingQuery, ListingQueryVariables>) {
        return ApolloReactHooks.useQuery<ListingQuery, ListingQueryVariables>(ListingDocument, baseOptions);
      }
export function useListingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ListingQuery, ListingQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ListingQuery, ListingQueryVariables>(ListingDocument, baseOptions);
        }
export type ListingQueryHookResult = ReturnType<typeof useListingQuery>;
export type ListingLazyQueryHookResult = ReturnType<typeof useListingLazyQuery>;
export type ListingQueryResult = ApolloReactCommon.QueryResult<ListingQuery, ListingQueryVariables>;
export const ListingPriceDocument = gql`
    query listingPrice($id: Int!) {
  listing(id: $id) {
    id
    price
  }
}
    `;

/**
 * __useListingPriceQuery__
 *
 * To run a query within a React component, call `useListingPriceQuery` and pass it any options that fit your needs.
 * When your component renders, `useListingPriceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListingPriceQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useListingPriceQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ListingPriceQuery, ListingPriceQueryVariables>) {
        return ApolloReactHooks.useQuery<ListingPriceQuery, ListingPriceQueryVariables>(ListingPriceDocument, baseOptions);
      }
export function useListingPriceLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ListingPriceQuery, ListingPriceQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ListingPriceQuery, ListingPriceQueryVariables>(ListingPriceDocument, baseOptions);
        }
export type ListingPriceQueryHookResult = ReturnType<typeof useListingPriceQuery>;
export type ListingPriceLazyQueryHookResult = ReturnType<typeof useListingPriceLazyQuery>;
export type ListingPriceQueryResult = ApolloReactCommon.QueryResult<ListingPriceQuery, ListingPriceQueryVariables>;
export const ListingsDocument = gql`
    query listings($listingIds: [Int!]!) {
  listings(listingIds: $listingIds) {
    ...listing
  }
}
    ${ListingFragmentDoc}`;

/**
 * __useListingsQuery__
 *
 * To run a query within a React component, call `useListingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useListingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListingsQuery({
 *   variables: {
 *      listingIds: // value for 'listingIds'
 *   },
 * });
 */
export function useListingsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ListingsQuery, ListingsQueryVariables>) {
        return ApolloReactHooks.useQuery<ListingsQuery, ListingsQueryVariables>(ListingsDocument, baseOptions);
      }
export function useListingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ListingsQuery, ListingsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ListingsQuery, ListingsQueryVariables>(ListingsDocument, baseOptions);
        }
export type ListingsQueryHookResult = ReturnType<typeof useListingsQuery>;
export type ListingsLazyQueryHookResult = ReturnType<typeof useListingsLazyQuery>;
export type ListingsQueryResult = ApolloReactCommon.QueryResult<ListingsQuery, ListingsQueryVariables>;
export const UserListingsDocument = gql`
    query userListings {
  viewer {
    id
    availableListings: listings(status: available) {
      ...listing
    }
    soldListings: listings(status: sold) {
      ...listing
    }
  }
}
    ${ListingFragmentDoc}`;

/**
 * __useUserListingsQuery__
 *
 * To run a query within a React component, call `useUserListingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserListingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserListingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserListingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UserListingsQuery, UserListingsQueryVariables>) {
        return ApolloReactHooks.useQuery<UserListingsQuery, UserListingsQueryVariables>(UserListingsDocument, baseOptions);
      }
export function useUserListingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UserListingsQuery, UserListingsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<UserListingsQuery, UserListingsQueryVariables>(UserListingsDocument, baseOptions);
        }
export type UserListingsQueryHookResult = ReturnType<typeof useUserListingsQuery>;
export type UserListingsLazyQueryHookResult = ReturnType<typeof useUserListingsLazyQuery>;
export type UserListingsQueryResult = ApolloReactCommon.QueryResult<UserListingsQuery, UserListingsQueryVariables>;
export const ListingReportsDocument = gql`
    query listingReports($listingId: Int!) {
  listing(id: $listingId) {
    reports {
      id
      text
      createdAt
      reviewedAt
    }
  }
}
    `;

/**
 * __useListingReportsQuery__
 *
 * To run a query within a React component, call `useListingReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useListingReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListingReportsQuery({
 *   variables: {
 *      listingId: // value for 'listingId'
 *   },
 * });
 */
export function useListingReportsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ListingReportsQuery, ListingReportsQueryVariables>) {
        return ApolloReactHooks.useQuery<ListingReportsQuery, ListingReportsQueryVariables>(ListingReportsDocument, baseOptions);
      }
export function useListingReportsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ListingReportsQuery, ListingReportsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ListingReportsQuery, ListingReportsQueryVariables>(ListingReportsDocument, baseOptions);
        }
export type ListingReportsQueryHookResult = ReturnType<typeof useListingReportsQuery>;
export type ListingReportsLazyQueryHookResult = ReturnType<typeof useListingReportsLazyQuery>;
export type ListingReportsQueryResult = ApolloReactCommon.QueryResult<ListingReportsQuery, ListingReportsQueryVariables>;
export const TagsDocument = gql`
    query tags($context: TagTypesEnum!, $name: String, $minimum: Int) {
  tags(context: $context, name: $name, minimum: $minimum) {
    id
    name
  }
}
    `;

/**
 * __useTagsQuery__
 *
 * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.
 * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTagsQuery({
 *   variables: {
 *      context: // value for 'context'
 *      name: // value for 'name'
 *      minimum: // value for 'minimum'
 *   },
 * });
 */
export function useTagsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<TagsQuery, TagsQueryVariables>) {
        return ApolloReactHooks.useQuery<TagsQuery, TagsQueryVariables>(TagsDocument, baseOptions);
      }
export function useTagsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TagsQuery, TagsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<TagsQuery, TagsQueryVariables>(TagsDocument, baseOptions);
        }
export type TagsQueryHookResult = ReturnType<typeof useTagsQuery>;
export type TagsLazyQueryHookResult = ReturnType<typeof useTagsLazyQuery>;
export type TagsQueryResult = ApolloReactCommon.QueryResult<TagsQuery, TagsQueryVariables>;
export const FavoriteListingsDocument = gql`
    query favoriteListings {
  viewer {
    favoriteListings {
      ...listing
    }
  }
}
    ${ListingFragmentDoc}`;

/**
 * __useFavoriteListingsQuery__
 *
 * To run a query within a React component, call `useFavoriteListingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFavoriteListingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFavoriteListingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useFavoriteListingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<FavoriteListingsQuery, FavoriteListingsQueryVariables>) {
        return ApolloReactHooks.useQuery<FavoriteListingsQuery, FavoriteListingsQueryVariables>(FavoriteListingsDocument, baseOptions);
      }
export function useFavoriteListingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<FavoriteListingsQuery, FavoriteListingsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<FavoriteListingsQuery, FavoriteListingsQueryVariables>(FavoriteListingsDocument, baseOptions);
        }
export type FavoriteListingsQueryHookResult = ReturnType<typeof useFavoriteListingsQuery>;
export type FavoriteListingsLazyQueryHookResult = ReturnType<typeof useFavoriteListingsLazyQuery>;
export type FavoriteListingsQueryResult = ApolloReactCommon.QueryResult<FavoriteListingsQuery, FavoriteListingsQueryVariables>;
export const SimilarListingsDocument = gql`
    query similarListings($id: Int!) {
  listing(id: $id) {
    id
    similarListings {
      ...listing
    }
  }
}
    ${ListingFragmentDoc}`;

/**
 * __useSimilarListingsQuery__
 *
 * To run a query within a React component, call `useSimilarListingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSimilarListingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSimilarListingsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSimilarListingsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<SimilarListingsQuery, SimilarListingsQueryVariables>) {
        return ApolloReactHooks.useQuery<SimilarListingsQuery, SimilarListingsQueryVariables>(SimilarListingsDocument, baseOptions);
      }
export function useSimilarListingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SimilarListingsQuery, SimilarListingsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SimilarListingsQuery, SimilarListingsQueryVariables>(SimilarListingsDocument, baseOptions);
        }
export type SimilarListingsQueryHookResult = ReturnType<typeof useSimilarListingsQuery>;
export type SimilarListingsLazyQueryHookResult = ReturnType<typeof useSimilarListingsLazyQuery>;
export type SimilarListingsQueryResult = ApolloReactCommon.QueryResult<SimilarListingsQuery, SimilarListingsQueryVariables>;
export const UserOffersDocument = gql`
    query userOffers {
  viewer {
    id
    offers {
      ...offer
    }
  }
}
    ${OfferFragmentDoc}`;

/**
 * __useUserOffersQuery__
 *
 * To run a query within a React component, call `useUserOffersQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserOffersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserOffersQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserOffersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UserOffersQuery, UserOffersQueryVariables>) {
        return ApolloReactHooks.useQuery<UserOffersQuery, UserOffersQueryVariables>(UserOffersDocument, baseOptions);
      }
export function useUserOffersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UserOffersQuery, UserOffersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<UserOffersQuery, UserOffersQueryVariables>(UserOffersDocument, baseOptions);
        }
export type UserOffersQueryHookResult = ReturnType<typeof useUserOffersQuery>;
export type UserOffersLazyQueryHookResult = ReturnType<typeof useUserOffersLazyQuery>;
export type UserOffersQueryResult = ApolloReactCommon.QueryResult<UserOffersQuery, UserOffersQueryVariables>;
export const PurchasesDocument = gql`
    query purchases {
  viewer {
    id
    purchases {
      id
      createdAt
      offer {
        id
        price
      }
      listing {
        id
        title
        seller {
          id
          username
        }
        images {
          ...listingImage
        }
      }
    }
  }
}
    ${ListingImageFragmentDoc}`;

/**
 * __usePurchasesQuery__
 *
 * To run a query within a React component, call `usePurchasesQuery` and pass it any options that fit your needs.
 * When your component renders, `usePurchasesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePurchasesQuery({
 *   variables: {
 *   },
 * });
 */
export function usePurchasesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PurchasesQuery, PurchasesQueryVariables>) {
        return ApolloReactHooks.useQuery<PurchasesQuery, PurchasesQueryVariables>(PurchasesDocument, baseOptions);
      }
export function usePurchasesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PurchasesQuery, PurchasesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PurchasesQuery, PurchasesQueryVariables>(PurchasesDocument, baseOptions);
        }
export type PurchasesQueryHookResult = ReturnType<typeof usePurchasesQuery>;
export type PurchasesLazyQueryHookResult = ReturnType<typeof usePurchasesLazyQuery>;
export type PurchasesQueryResult = ApolloReactCommon.QueryResult<PurchasesQuery, PurchasesQueryVariables>;
export const PurchaseDocument = gql`
    query purchase($token: String!) {
  purchase(token: $token) {
    id
    review {
      id
      speed
      communication
      accuracy
    }
  }
}
    `;

/**
 * __usePurchaseQuery__
 *
 * To run a query within a React component, call `usePurchaseQuery` and pass it any options that fit your needs.
 * When your component renders, `usePurchaseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePurchaseQuery({
 *   variables: {
 *      token: // value for 'token'
 *   },
 * });
 */
export function usePurchaseQuery(baseOptions: ApolloReactHooks.QueryHookOptions<PurchaseQuery, PurchaseQueryVariables>) {
        return ApolloReactHooks.useQuery<PurchaseQuery, PurchaseQueryVariables>(PurchaseDocument, baseOptions);
      }
export function usePurchaseLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PurchaseQuery, PurchaseQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PurchaseQuery, PurchaseQueryVariables>(PurchaseDocument, baseOptions);
        }
export type PurchaseQueryHookResult = ReturnType<typeof usePurchaseQuery>;
export type PurchaseLazyQueryHookResult = ReturnType<typeof usePurchaseLazyQuery>;
export type PurchaseQueryResult = ApolloReactCommon.QueryResult<PurchaseQuery, PurchaseQueryVariables>;
export const SellerDocument = gql`
    query seller($username: String!) {
  seller(username: $username) {
    id
    username
    profilePictureUrl
    isFavorited
  }
}
    `;

/**
 * __useSellerQuery__
 *
 * To run a query within a React component, call `useSellerQuery` and pass it any options that fit your needs.
 * When your component renders, `useSellerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSellerQuery({
 *   variables: {
 *      username: // value for 'username'
 *   },
 * });
 */
export function useSellerQuery(baseOptions: ApolloReactHooks.QueryHookOptions<SellerQuery, SellerQueryVariables>) {
        return ApolloReactHooks.useQuery<SellerQuery, SellerQueryVariables>(SellerDocument, baseOptions);
      }
export function useSellerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SellerQuery, SellerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SellerQuery, SellerQueryVariables>(SellerDocument, baseOptions);
        }
export type SellerQueryHookResult = ReturnType<typeof useSellerQuery>;
export type SellerLazyQueryHookResult = ReturnType<typeof useSellerLazyQuery>;
export type SellerQueryResult = ApolloReactCommon.QueryResult<SellerQuery, SellerQueryVariables>;
export const FavoriteSellersDocument = gql`
    query favoriteSellers {
  viewer {
    favoriteSellers {
      id
      createdAt
      username
      profilePictureUrl
      isFavorited
    }
  }
}
    `;

/**
 * __useFavoriteSellersQuery__
 *
 * To run a query within a React component, call `useFavoriteSellersQuery` and pass it any options that fit your needs.
 * When your component renders, `useFavoriteSellersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFavoriteSellersQuery({
 *   variables: {
 *   },
 * });
 */
export function useFavoriteSellersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<FavoriteSellersQuery, FavoriteSellersQueryVariables>) {
        return ApolloReactHooks.useQuery<FavoriteSellersQuery, FavoriteSellersQueryVariables>(FavoriteSellersDocument, baseOptions);
      }
export function useFavoriteSellersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<FavoriteSellersQuery, FavoriteSellersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<FavoriteSellersQuery, FavoriteSellersQueryVariables>(FavoriteSellersDocument, baseOptions);
        }
export type FavoriteSellersQueryHookResult = ReturnType<typeof useFavoriteSellersQuery>;
export type FavoriteSellersLazyQueryHookResult = ReturnType<typeof useFavoriteSellersLazyQuery>;
export type FavoriteSellersQueryResult = ApolloReactCommon.QueryResult<FavoriteSellersQuery, FavoriteSellersQueryVariables>;