import { gql } from '@apollo/client';
import * as ApolloReactCommon from '@apollo/client';
import * as ApolloReactHooks from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  Upload: any;
};

/** Autogenerated return type of AcceptListingReports */
export type AcceptListingReportsPayload = {
  __typename?: 'AcceptListingReportsPayload';
  listing: Listing;
  message: Scalars['String'];
};

/** Autogenerated return type of AcceptOffer */
export type AcceptOfferPayload = {
  __typename?: 'AcceptOfferPayload';
  message: Scalars['String'];
};

export type ActiveRecordInterface = {
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type AdminListingInput = {
  id: Scalars['Int'];
  status?: Maybe<ListingStatusEnum>;
};

/** Autogenerated return type of ConfirmOffer */
export type ConfirmOfferPayload = {
  __typename?: 'ConfirmOfferPayload';
  message: Scalars['String'];
  viewer: Maybe<User>;
};

export type EmailPreference = ActiveRecordInterface & {
  __typename?: 'EmailPreference';
  category: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  subscribed: Scalars['Boolean'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type EmailPreferenceInput = {
  category: Scalars['String'];
  subscribed: Scalars['Boolean'];
};

/** Autogenerated return type of ForgotPassword */
export type ForgotPasswordPayload = {
  __typename?: 'ForgotPasswordPayload';
  message: Scalars['String'];
};


/** Autogenerated return type of JoinMailingList */
export type JoinMailingListPayload = {
  __typename?: 'JoinMailingListPayload';
  message: Scalars['String'];
  success: Scalars['Boolean'];
};

export type Listing = ActiveRecordInterface & {
  __typename?: 'Listing';
  createdAt: Scalars['ISO8601DateTime'];
  description: Scalars['String'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  images: Array<ListingImage>;
  isFavorited: Scalars['Boolean'];
  offers: Array<Offer>;
  ownedByUser: Scalars['Boolean'];
  player: Scalars['String'];
  price: Scalars['Int'];
  reports: Array<ListingReport>;
  seller: Seller;
  similarListings: Array<Listing>;
  status: ListingStatusEnum;
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  year: Maybe<Scalars['Int']>;
};


export type ListingIsFavoritedArgs = {
  userId?: Maybe<Scalars['Int']>;
};

export type ListingImage = ActiveRecordInterface & {
  __typename?: 'ListingImage';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  position: Scalars['Int'];
  updatedAt: Scalars['ISO8601DateTime'];
  url: Scalars['String'];
};

export type ListingInput = {
  id?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  price: Scalars['Float'];
  images: Array<Scalars['Upload']>;
  year?: Maybe<Scalars['Int']>;
  category: Scalars['String'];
  productType: Scalars['String'];
  manufacturer: Scalars['String'];
  setType: Scalars['String'];
  grader?: Maybe<Scalars['String']>;
  parallel?: Maybe<Scalars['String']>;
  player?: Maybe<Scalars['String']>;
  rookie?: Maybe<Scalars['Boolean']>;
};

export type ListingReport = ActiveRecordInterface & {
  __typename?: 'ListingReport';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  reviewedAt: Maybe<Scalars['ISO8601DateTime']>;
  text: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export enum ListingStatusEnum {
  /** available */
  Available = 'available',
  /** pending_sale */
  PendingSale = 'pending_sale',
  /** sold */
  Sold = 'sold',
  /** disabled */
  Disabled = 'disabled'
}

/** Autogenerated return type of MarkNoticesRead */
export type MarkNoticesReadPayload = {
  __typename?: 'MarkNoticesReadPayload';
  message: Scalars['String'];
  success: Scalars['Boolean'];
};

export type Membership = ActiveRecordInterface & {
  __typename?: 'Membership';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  price: Scalars['Int'];
  term: Scalars['String'];
  token: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Mutation = {
  __typename?: 'Mutation';
  acceptListingReports: Maybe<AcceptListingReportsPayload>;
  acceptOffer: Maybe<AcceptOfferPayload>;
  confirmOffer: Maybe<ConfirmOfferPayload>;
  forgotPassword: Maybe<ForgotPasswordPayload>;
  joinMailingList: Maybe<JoinMailingListPayload>;
  markNoticesRead: Maybe<MarkNoticesReadPayload>;
  reportListing: Maybe<ReportListingPayload>;
  saveEmailPreferences: Maybe<SaveEmailPreferencesPayload>;
  saveListing: Maybe<SaveListingPayload>;
  saveOffer: Maybe<SaveOfferPayload>;
  saveProfile: Maybe<SaveProfilePayload>;
  saveProfilePicture: Maybe<SaveProfilePicturePayload>;
  saveReview: Maybe<SaveReviewPayload>;
  syncPayment: Maybe<SyncPaymentPayload>;
  toggleFavoriteListing: Maybe<ToggleFavoriteListingPayload>;
  toggleFavoriteSeller: Maybe<ToggleFavoriteSellerPayload>;
  trackInterest: Maybe<TrackInterestPayload>;
  updateListing: Maybe<UpdateListingPayload>;
};


export type MutationAcceptListingReportsArgs = {
  listingId: Scalars['Int'];
};


export type MutationAcceptOfferArgs = {
  offerId: Scalars['Int'];
};


export type MutationConfirmOfferArgs = {
  offerId: Scalars['Int'];
};


export type MutationForgotPasswordArgs = {
  email: Scalars['String'];
};


export type MutationJoinMailingListArgs = {
  email: Scalars['String'];
};


export type MutationReportListingArgs = {
  listingId: Scalars['Int'];
  text: Scalars['String'];
};


export type MutationSaveEmailPreferencesArgs = {
  emailPreferences: Array<EmailPreferenceInput>;
  token?: Maybe<Scalars['String']>;
};


export type MutationSaveListingArgs = {
  listing: ListingInput;
};


export type MutationSaveOfferArgs = {
  offer: OfferInput;
};


export type MutationSaveProfileArgs = {
  profile: ProfileInput;
};


export type MutationSaveProfilePictureArgs = {
  picture: Scalars['Upload'];
};


export type MutationSaveReviewArgs = {
  review: ReviewInput;
};


export type MutationSyncPaymentArgs = {
  paymentMethodId: Scalars['String'];
};


export type MutationToggleFavoriteListingArgs = {
  listingId: Scalars['Int'];
  isFavorited: Scalars['Boolean'];
};


export type MutationToggleFavoriteSellerArgs = {
  sellerId: Scalars['Int'];
  isFavorited: Scalars['Boolean'];
};


export type MutationTrackInterestArgs = {
  listingId: Scalars['Int'];
};


export type MutationUpdateListingArgs = {
  listing: AdminListingInput;
};

export type Notice = ActiveRecordInterface & {
  __typename?: 'Notice';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  path: Maybe<Scalars['String']>;
  text: Scalars['String'];
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Offer = ActiveRecordInterface & {
  __typename?: 'Offer';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  listing: Listing;
  price: Scalars['Int'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type OfferInput = {
  price: Scalars['Float'];
  listingId: Scalars['Int'];
};

export type ProfileInput = {
  fullName?: Maybe<Scalars['String']>;
  street1?: Maybe<Scalars['String']>;
  street2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type Purchase = ActiveRecordInterface & {
  __typename?: 'Purchase';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  listing: Listing;
  offer: Offer;
  review: Maybe<Review>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Query = {
  __typename?: 'Query';
  auth: Scalars['Boolean'];
  invitedViewer: Maybe<User>;
  listing: Listing;
  listings: Array<Listing>;
  maybeViewer: Maybe<User>;
  purchase: Purchase;
  seller: Seller;
  stripeSetupIntentId: Scalars['String'];
  tags: Array<Tag>;
  viewer: User;
};


export type QueryInvitedViewerArgs = {
  token: Scalars['String'];
};


export type QueryListingArgs = {
  id: Scalars['Int'];
};


export type QueryListingsArgs = {
  listingIds: Array<Scalars['Int']>;
};


export type QueryPurchaseArgs = {
  token: Scalars['String'];
};


export type QuerySellerArgs = {
  username: Scalars['String'];
};


export type QueryTagsArgs = {
  context: TagTypesEnum;
  name?: Maybe<Scalars['String']>;
  minimum?: Maybe<Scalars['Int']>;
};


export type QueryViewerArgs = {
  token?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ReportListing */
export type ReportListingPayload = {
  __typename?: 'ReportListingPayload';
  message: Scalars['String'];
};

export type Review = ActiveRecordInterface & {
  __typename?: 'Review';
  accuracy: Maybe<Scalars['Int']>;
  communication: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  speed: Maybe<Scalars['Int']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type ReviewInput = {
  purchaseId: Scalars['Int'];
  speed?: Maybe<Scalars['Int']>;
  accuracy?: Maybe<Scalars['Int']>;
  communication?: Maybe<Scalars['Int']>;
};

/** Autogenerated return type of SaveEmailPreferences */
export type SaveEmailPreferencesPayload = {
  __typename?: 'SaveEmailPreferencesPayload';
  message: Scalars['String'];
  viewer: User;
};

/** Autogenerated return type of SaveListing */
export type SaveListingPayload = {
  __typename?: 'SaveListingPayload';
  message: Scalars['String'];
  newListingId: Maybe<Scalars['Int']>;
  viewer: User;
};

/** Autogenerated return type of SaveOffer */
export type SaveOfferPayload = {
  __typename?: 'SaveOfferPayload';
  message: Scalars['String'];
  offerId: Maybe<Scalars['Int']>;
  paymentIntentId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of SaveProfile */
export type SaveProfilePayload = {
  __typename?: 'SaveProfilePayload';
  message: Scalars['String'];
  viewer: User;
};

/** Autogenerated return type of SaveProfilePicture */
export type SaveProfilePicturePayload = {
  __typename?: 'SaveProfilePicturePayload';
  message: Scalars['String'];
  viewer: User;
};

/** Autogenerated return type of SaveReview */
export type SaveReviewPayload = {
  __typename?: 'SaveReviewPayload';
  message: Scalars['String'];
  purchase: Purchase;
};

export type Seller = ActiveRecordInterface & {
  __typename?: 'Seller';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  isFavorited: Scalars['Boolean'];
  profilePictureUrl: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  username: Scalars['String'];
};


export type SellerIsFavoritedArgs = {
  userId?: Maybe<Scalars['Int']>;
};

export type StripeAccount = ActiveRecordInterface & {
  __typename?: 'StripeAccount';
  chargesEnabled: Scalars['Boolean'];
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  onboardingLink: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type StripePaymentMethod = ActiveRecordInterface & {
  __typename?: 'StripePaymentMethod';
  brand: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  id: Scalars['Int'];
  last4: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

/** Autogenerated return type of SyncPayment */
export type SyncPaymentPayload = {
  __typename?: 'SyncPaymentPayload';
  message: Scalars['String'];
  viewer: User;
};

export type Tag = {
  __typename?: 'Tag';
  id: Scalars['String'];
  name: Scalars['String'];
};

export enum TagTypesEnum {
  /** player */
  Player = 'player',
  /** category */
  Category = 'category',
  /** product_type */
  ProductType = 'product_type',
  /** set_type */
  SetType = 'set_type',
  /** manufacturer */
  Manufacturer = 'manufacturer',
  /** grader */
  Grader = 'grader',
  /** parallel */
  Parallel = 'parallel'
}

/** Autogenerated return type of ToggleFavoriteListing */
export type ToggleFavoriteListingPayload = {
  __typename?: 'ToggleFavoriteListingPayload';
  listing: Listing;
  message: Scalars['String'];
};

/** Autogenerated return type of ToggleFavoriteSeller */
export type ToggleFavoriteSellerPayload = {
  __typename?: 'ToggleFavoriteSellerPayload';
  message: Scalars['String'];
  seller: Seller;
};

/** Autogenerated return type of TrackInterest */
export type TrackInterestPayload = {
  __typename?: 'TrackInterestPayload';
  message: Scalars['String'];
  success: Scalars['Boolean'];
};

/** Autogenerated return type of UpdateListing */
export type UpdateListingPayload = {
  __typename?: 'UpdateListingPayload';
  listing: Listing;
  message: Scalars['String'];
};


export type User = ActiveRecordInterface & {
  __typename?: 'User';
  admin: Scalars['Boolean'];
  availableMemberships: Array<Membership>;
  city: Maybe<Scalars['String']>;
  confirmed: Scalars['Boolean'];
  createdAt: Scalars['ISO8601DateTime'];
  email: Scalars['String'];
  emailPreferences: Array<EmailPreference>;
  errors: Array<Scalars['String']>;
  favoriteListings: Array<Listing>;
  favoriteSellers: Array<Seller>;
  fullName: Maybe<Scalars['String']>;
  hasActiveSubscription: Scalars['Boolean'];
  hasPaymentMethod: Scalars['Boolean'];
  id: Scalars['Int'];
  listings: Array<Listing>;
  offers: Array<Offer>;
  paymentMethod: Maybe<StripePaymentMethod>;
  profilePictureUrl: Scalars['String'];
  purchases: Array<Purchase>;
  state: Maybe<Scalars['String']>;
  street1: Maybe<Scalars['String']>;
  street2: Maybe<Scalars['String']>;
  stripeAccount: StripeAccount;
  unreadNotices: Array<Notice>;
  updatedAt: Scalars['ISO8601DateTime'];
  username: Scalars['String'];
  zip: Maybe<Scalars['String']>;
};


export type UserListingsArgs = {
  status?: Maybe<ListingStatusEnum>;
};


export type UserOffersArgs = {
  status?: Maybe<ListingStatusEnum>;
};


export type UserStripeAccountArgs = {
  refresh?: Maybe<Scalars['Boolean']>;
};

export type JoinMailingListMutationVariables = Exact<{
  email: Scalars['String'];
}>;


export type JoinMailingListMutation = (
  { __typename?: 'Mutation' }
  & { joinMailingList: Maybe<(
    { __typename?: 'JoinMailingListPayload' }
    & Pick<JoinMailingListPayload, 'success' | 'message'>
  )> }
);


export const JoinMailingListDocument = gql`
    mutation joinMailingList($email: String!) {
  joinMailingList(email: $email) {
    success
    message
  }
}
    `;
export type JoinMailingListMutationFn = ApolloReactCommon.MutationFunction<JoinMailingListMutation, JoinMailingListMutationVariables>;

/**
 * __useJoinMailingListMutation__
 *
 * To run a mutation, you first call `useJoinMailingListMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useJoinMailingListMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [joinMailingListMutation, { data, loading, error }] = useJoinMailingListMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useJoinMailingListMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<JoinMailingListMutation, JoinMailingListMutationVariables>) {
        return ApolloReactHooks.useMutation<JoinMailingListMutation, JoinMailingListMutationVariables>(JoinMailingListDocument, baseOptions);
      }
export type JoinMailingListMutationHookResult = ReturnType<typeof useJoinMailingListMutation>;
export type JoinMailingListMutationResult = ApolloReactCommon.MutationResult<JoinMailingListMutation>;
export type JoinMailingListMutationOptions = ApolloReactCommon.BaseMutationOptions<JoinMailingListMutation, JoinMailingListMutationVariables>;